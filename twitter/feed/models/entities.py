# coding: utf-8

from __future__ import absolute_import
from feed.models.hashtags import Hashtags
from feed.models.media import Media
from feed.models.url import URL
from feed.models.user_mention import UserMention
#from django.db.models import Model
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Entities(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, hashtags: List[Hashtags]=None, media: List[Media]=None, urls: List[URL]=None, user_mentions: List[UserMention]=None):
        """
        Entities - a model defined in Swagger

        :param hashtags: The hashtags of this Entities.
        :type hashtags: List[Hashtags]
        :param media: The media of this Entities.
        :type media: List[Media]
        :param urls: The urls of this Entities.
        :type urls: List[URL]
        :param user_mentions: The user_mentions of this Entities.
        :type user_mentions: List[UserMention]
        """
        self.swagger_types = {
            'hashtags': List[Hashtags],
            'media': List[Media],
            'urls': List[URL],
            'user_mentions': List[UserMention]
        }

        self.attribute_map = {
            'hashtags': 'hashtags',
            'media': 'media',
            'urls': 'urls',
            'user_mentions': 'user_mentions'
        }

        self._hashtags = hashtags
        self._media = media
        self._urls = urls
        self._user_mentions = user_mentions

    @classmethod
    def from_dict(cls, dikt) -> 'Entities':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Entities of this Entities.
        :rtype: Entities
        """
        return deserialize_model(dikt, cls)

    @property
    def hashtags(self) -> List[Hashtags]:
        """
        Gets the hashtags of this Entities.

        :return: The hashtags of this Entities.
        :rtype: List[Hashtags]
        """
        return self._hashtags

    @hashtags.setter
    def hashtags(self, hashtags: List[Hashtags]):
        """
        Sets the hashtags of this Entities.

        :param hashtags: The hashtags of this Entities.
        :type hashtags: List[Hashtags]
        """

        self._hashtags = hashtags

    @property
    def media(self) -> List[Media]:
        """
        Gets the media of this Entities.

        :return: The media of this Entities.
        :rtype: List[Media]
        """
        return self._media

    @media.setter
    def media(self, media: List[Media]):
        """
        Sets the media of this Entities.

        :param media: The media of this Entities.
        :type media: List[Media]
        """

        self._media = media

    @property
    def urls(self) -> List[URL]:
        """
        Gets the urls of this Entities.

        :return: The urls of this Entities.
        :rtype: List[URL]
        """
        return self._urls

    @urls.setter
    def urls(self, urls: List[URL]):
        """
        Sets the urls of this Entities.

        :param urls: The urls of this Entities.
        :type urls: List[URL]
        """

        self._urls = urls

    @property
    def user_mentions(self) -> List[UserMention]:
        """
        Gets the user_mentions of this Entities.

        :return: The user_mentions of this Entities.
        :rtype: List[UserMention]
        """
        return self._user_mentions

    @user_mentions.setter
    def user_mentions(self, user_mentions: List[UserMention]):
        """
        Sets the user_mentions of this Entities.

        :param user_mentions: The user_mentions of this Entities.
        :type user_mentions: List[UserMention]
        """

        self._user_mentions = user_mentions

