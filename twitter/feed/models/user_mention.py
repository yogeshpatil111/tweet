# coding: utf-8

from __future__ import absolute_import
#from django.db.models import Model
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class UserMention(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id: int=None, id_str: str=None, indices: List[int]=None, name: str=None, screen_name: str=None):
        """
        UserMention - a model defined in Swagger

        :param id: The id of this UserMention.
        :type id: int
        :param id_str: The id_str of this UserMention.
        :type id_str: str
        :param indices: The indices of this UserMention.
        :type indices: List[int]
        :param name: The name of this UserMention.
        :type name: str
        :param screen_name: The screen_name of this UserMention.
        :type screen_name: str
        """
        self.swagger_types = {
            'id': int,
            'id_str': str,
            'indices': List[int],
            'name': str,
            'screen_name': str
        }

        self.attribute_map = {
            'id': 'id',
            'id_str': 'id_str',
            'indices': 'indices',
            'name': 'name',
            'screen_name': 'screen_name'
        }

        self._id = id
        self._id_str = id_str
        self._indices = indices
        self._name = name
        self._screen_name = screen_name

    @classmethod
    def from_dict(cls, dikt) -> 'UserMention':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User_Mention of this UserMention.
        :rtype: UserMention
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """
        Gets the id of this UserMention.

        :return: The id of this UserMention.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """
        Sets the id of this UserMention.

        :param id: The id of this UserMention.
        :type id: int
        """

        self._id = id

    @property
    def id_str(self) -> str:
        """
        Gets the id_str of this UserMention.

        :return: The id_str of this UserMention.
        :rtype: str
        """
        return self._id_str

    @id_str.setter
    def id_str(self, id_str: str):
        """
        Sets the id_str of this UserMention.

        :param id_str: The id_str of this UserMention.
        :type id_str: str
        """

        self._id_str = id_str

    @property
    def indices(self) -> List[int]:
        """
        Gets the indices of this UserMention.

        :return: The indices of this UserMention.
        :rtype: List[int]
        """
        return self._indices

    @indices.setter
    def indices(self, indices: List[int]):
        """
        Sets the indices of this UserMention.

        :param indices: The indices of this UserMention.
        :type indices: List[int]
        """

        self._indices = indices

    @property
    def name(self) -> str:
        """
        Gets the name of this UserMention.

        :return: The name of this UserMention.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this UserMention.

        :param name: The name of this UserMention.
        :type name: str
        """

        self._name = name

    @property
    def screen_name(self) -> str:
        """
        Gets the screen_name of this UserMention.

        :return: The screen_name of this UserMention.
        :rtype: str
        """
        return self._screen_name

    @screen_name.setter
    def screen_name(self, screen_name: str):
        """
        Sets the screen_name of this UserMention.

        :param screen_name: The screen_name of this UserMention.
        :type screen_name: str
        """

        self._screen_name = screen_name

