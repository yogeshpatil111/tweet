# coding: utf-8

from __future__ import absolute_import
from feed.models.entities import Entities
#from django.db.models import Model
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Users(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created_at: str=None, description: str=None, entities: Entities=None,
                 following: bool=None, followers_count: int=None, friends_count: int=None,
                 id: int=None, id_str: str=None, listed_count: int=None, name: str=None,
                 notifications: bool=None, screen_name: str=None):
        self.swagger_types = {
            'created_at': str,
            'description': str,
            'entities': Entities,
            'following': bool,
            'followers_count': int,
            'friends_count': int,
            'id': int,
            'id_str': str,
            'listed_count': int,
            'name': str,
            'notifications': bool,
            'screen_name': str,
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'description': 'description',
            'entities': 'entities',
            'following': 'following',
            'followers_count': 'followers_count',
            'friends_count': 'friends_count',
            'id': 'id',
            'id_str': 'id_str',
            'listed_count': 'listed_count',
            'name': 'name',
            'notifications': 'notifications',
            'screen_name': 'screen_name'
        }

        self._created_at = created_at
        self._description = description
        self._entities = entities
        self._following = following
        self._followers_count = followers_count
        self._friends_count = friends_count
        self._id = id
        self._id_str = id_str
        self._listed_count = listed_count
        self._name = name
        self._notifications = notifications
        self._screen_name = screen_name

    @classmethod
    def from_dict(cls, dikt) -> 'Users':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Users of this Users.
        :rtype: Users
        """
        return deserialize_model(dikt, cls)

    @property
    def contributors_enabled(self) -> bool:
        """
        Gets the contributors_enabled of this Users.

        :return: The contributors_enabled of this Users.
        :rtype: bool
        """
        return self._contributors_enabled

    @contributors_enabled.setter
    def contributors_enabled(self, contributors_enabled: bool):
        """
        Sets the contributors_enabled of this Users.

        :param contributors_enabled: The contributors_enabled of this Users.
        :type contributors_enabled: bool
        """

        self._contributors_enabled = contributors_enabled

    @property
    def created_at(self) -> str:
        """
        Gets the created_at of this Users.

        :return: The created_at of this Users.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: str):
        """
        Sets the created_at of this Users.

        :param created_at: The created_at of this Users.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def default_profile(self) -> bool:
        """
        Gets the default_profile of this Users.

        :return: The default_profile of this Users.
        :rtype: bool
        """
        return self._default_profile

    @default_profile.setter
    def default_profile(self, default_profile: bool):
        """
        Sets the default_profile of this Users.

        :param default_profile: The default_profile of this Users.
        :type default_profile: bool
        """

        self._default_profile = default_profile

    @property
    def default_profile_image(self) -> bool:
        """
        Gets the default_profile_image of this Users.

        :return: The default_profile_image of this Users.
        :rtype: bool
        """
        return self._default_profile_image

    @default_profile_image.setter
    def default_profile_image(self, default_profile_image: bool):
        """
        Sets the default_profile_image of this Users.

        :param default_profile_image: The default_profile_image of this Users.
        :type default_profile_image: bool
        """

        self._default_profile_image = default_profile_image

    @property
    def description(self) -> str:
        """
        Gets the description of this Users.

        :return: The description of this Users.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """
        Sets the description of this Users.

        :param description: The description of this Users.
        :type description: str
        """

        self._description = description

    @property
    def entities(self) -> Entities:
        """
        Gets the entities of this Users.

        :return: The entities of this Users.
        :rtype: Entities
        """
        return self._entities

    @entities.setter
    def entities(self, entities: Entities):
        """
        Sets the entities of this Users.

        :param entities: The entities of this Users.
        :type entities: Entities
        """

        self._entities = entities

    @property
    def favorites_count(self) -> int:
        """
        Gets the favorites_count of this Users.

        :return: The favorites_count of this Users.
        :rtype: int
        """
        return self._favorites_count

    @favorites_count.setter
    def favorites_count(self, favorites_count: int):
        """
        Sets the favorites_count of this Users.

        :param favorites_count: The favorites_count of this Users.
        :type favorites_count: int
        """

        self._favorites_count = favorites_count

    @property
    def follow_request_sent(self) -> bool:
        """
        Gets the follow_request_sent of this Users.

        :return: The follow_request_sent of this Users.
        :rtype: bool
        """
        return self._follow_request_sent

    @follow_request_sent.setter
    def follow_request_sent(self, follow_request_sent: bool):
        """
        Sets the follow_request_sent of this Users.

        :param follow_request_sent: The follow_request_sent of this Users.
        :type follow_request_sent: bool
        """

        self._follow_request_sent = follow_request_sent

    @property
    def following(self) -> bool:
        """
        Gets the following of this Users.

        :return: The following of this Users.
        :rtype: bool
        """
        return self._following

    @following.setter
    def following(self, following: bool):
        """
        Sets the following of this Users.

        :param following: The following of this Users.
        :type following: bool
        """

        self._following = following

    @property
    def followers_count(self) -> int:
        """
        Gets the followers_count of this Users.

        :return: The followers_count of this Users.
        :rtype: int
        """
        return self._followers_count

    @followers_count.setter
    def followers_count(self, followers_count: int):
        """
        Sets the followers_count of this Users.

        :param followers_count: The followers_count of this Users.
        :type followers_count: int
        """

        self._followers_count = followers_count

    @property
    def friends_count(self) -> int:
        """
        Gets the friends_count of this Users.

        :return: The friends_count of this Users.
        :rtype: int
        """
        return self._friends_count

    @friends_count.setter
    def friends_count(self, friends_count: int):
        """
        Sets the friends_count of this Users.

        :param friends_count: The friends_count of this Users.
        :type friends_count: int
        """

        self._friends_count = friends_count

    @property
    def geo_enabled(self) -> bool:
        """
        Gets the geo_enabled of this Users.

        :return: The geo_enabled of this Users.
        :rtype: bool
        """
        return self._geo_enabled

    @geo_enabled.setter
    def geo_enabled(self, geo_enabled: bool):
        """
        Sets the geo_enabled of this Users.

        :param geo_enabled: The geo_enabled of this Users.
        :type geo_enabled: bool
        """

        self._geo_enabled = geo_enabled

    @property
    def id(self) -> int:
        """
        Gets the id of this Users.

        :return: The id of this Users.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """
        Sets the id of this Users.

        :param id: The id of this Users.
        :type id: int
        """

        self._id = id

    @property
    def id_str(self) -> str:
        """
        Gets the id_str of this Users.

        :return: The id_str of this Users.
        :rtype: str
        """
        return self._id_str

    @id_str.setter
    def id_str(self, id_str: str):
        """
        Sets the id_str of this Users.

        :param id_str: The id_str of this Users.
        :type id_str: str
        """

        self._id_str = id_str

    @property
    def is_translator(self) -> bool:
        """
        Gets the is_translator of this Users.

        :return: The is_translator of this Users.
        :rtype: bool
        """
        return self._is_translator

    @is_translator.setter
    def is_translator(self, is_translator: bool):
        """
        Sets the is_translator of this Users.

        :param is_translator: The is_translator of this Users.
        :type is_translator: bool
        """

        self._is_translator = is_translator

    @property
    def lang(self) -> str:
        """
        Gets the lang of this Users.

        :return: The lang of this Users.
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang: str):
        """
        Sets the lang of this Users.

        :param lang: The lang of this Users.
        :type lang: str
        """

        self._lang = lang

    @property
    def listed_count(self) -> int:
        """
        Gets the listed_count of this Users.

        :return: The listed_count of this Users.
        :rtype: int
        """
        return self._listed_count

    @listed_count.setter
    def listed_count(self, listed_count: int):
        """
        Sets the listed_count of this Users.

        :param listed_count: The listed_count of this Users.
        :type listed_count: int
        """

        self._listed_count = listed_count

    @property
    def location(self) -> str:
        """
        Gets the location of this Users.

        :return: The location of this Users.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location: str):
        """
        Sets the location of this Users.

        :param location: The location of this Users.
        :type location: str
        """

        self._location = location

    @property
    def name(self) -> str:
        """
        Gets the name of this Users.

        :return: The name of this Users.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this Users.

        :param name: The name of this Users.
        :type name: str
        """

        self._name = name

    @property
    def notifications(self) -> bool:
        """
        Gets the notifications of this Users.

        :return: The notifications of this Users.
        :rtype: bool
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications: bool):
        """
        Sets the notifications of this Users.

        :param notifications: The notifications of this Users.
        :type notifications: bool
        """

        self._notifications = notifications

    @property
    def profile_background_color(self) -> str:
        """
        Gets the profile_background_color of this Users.

        :return: The profile_background_color of this Users.
        :rtype: str
        """
        return self._profile_background_color

    @profile_background_color.setter
    def profile_background_color(self, profile_background_color: str):
        """
        Sets the profile_background_color of this Users.

        :param profile_background_color: The profile_background_color of this Users.
        :type profile_background_color: str
        """

        self._profile_background_color = profile_background_color

    @property
    def profile_background_image_url(self) -> str:
        """
        Gets the profile_background_image_url of this Users.

        :return: The profile_background_image_url of this Users.
        :rtype: str
        """
        return self._profile_background_image_url

    @profile_background_image_url.setter
    def profile_background_image_url(self, profile_background_image_url: str):
        """
        Sets the profile_background_image_url of this Users.

        :param profile_background_image_url: The profile_background_image_url of this Users.
        :type profile_background_image_url: str
        """

        self._profile_background_image_url = profile_background_image_url

    @property
    def profile_background_image_url_https(self) -> str:
        """
        Gets the profile_background_image_url_https of this Users.

        :return: The profile_background_image_url_https of this Users.
        :rtype: str
        """
        return self._profile_background_image_url_https

    @profile_background_image_url_https.setter
    def profile_background_image_url_https(self, profile_background_image_url_https: str):
        """
        Sets the profile_background_image_url_https of this Users.

        :param profile_background_image_url_https: The profile_background_image_url_https of this Users.
        :type profile_background_image_url_https: str
        """

        self._profile_background_image_url_https = profile_background_image_url_https

    @property
    def profile_background_tile(self) -> str:
        """
        Gets the profile_background_tile of this Users.

        :return: The profile_background_tile of this Users.
        :rtype: str
        """
        return self._profile_background_tile

    @profile_background_tile.setter
    def profile_background_tile(self, profile_background_tile: str):
        """
        Sets the profile_background_tile of this Users.

        :param profile_background_tile: The profile_background_tile of this Users.
        :type profile_background_tile: str
        """

        self._profile_background_tile = profile_background_tile

    @property
    def profile_banner_url(self) -> str:
        """
        Gets the profile_banner_url of this Users.

        :return: The profile_banner_url of this Users.
        :rtype: str
        """
        return self._profile_banner_url

    @profile_banner_url.setter
    def profile_banner_url(self, profile_banner_url: str):
        """
        Sets the profile_banner_url of this Users.

        :param profile_banner_url: The profile_banner_url of this Users.
        :type profile_banner_url: str
        """

        self._profile_banner_url = profile_banner_url

    @property
    def profile_image_url(self) -> str:
        """
        Gets the profile_image_url of this Users.

        :return: The profile_image_url of this Users.
        :rtype: str
        """
        return self._profile_image_url

    @profile_image_url.setter
    def profile_image_url(self, profile_image_url: str):
        """
        Sets the profile_image_url of this Users.

        :param profile_image_url: The profile_image_url of this Users.
        :type profile_image_url: str
        """

        self._profile_image_url = profile_image_url

    @property
    def profile_image_url_https(self) -> str:
        """
        Gets the profile_image_url_https of this Users.

        :return: The profile_image_url_https of this Users.
        :rtype: str
        """
        return self._profile_image_url_https

    @profile_image_url_https.setter
    def profile_image_url_https(self, profile_image_url_https: str):
        """
        Sets the profile_image_url_https of this Users.

        :param profile_image_url_https: The profile_image_url_https of this Users.
        :type profile_image_url_https: str
        """

        self._profile_image_url_https = profile_image_url_https

    @property
    def profile_link_color(self) -> str:
        """
        Gets the profile_link_color of this Users.

        :return: The profile_link_color of this Users.
        :rtype: str
        """
        return self._profile_link_color

    @profile_link_color.setter
    def profile_link_color(self, profile_link_color: str):
        """
        Sets the profile_link_color of this Users.

        :param profile_link_color: The profile_link_color of this Users.
        :type profile_link_color: str
        """

        self._profile_link_color = profile_link_color

    @property
    def profile_sidebar_border_color(self) -> str:
        """
        Gets the profile_sidebar_border_color of this Users.

        :return: The profile_sidebar_border_color of this Users.
        :rtype: str
        """
        return self._profile_sidebar_border_color

    @profile_sidebar_border_color.setter
    def profile_sidebar_border_color(self, profile_sidebar_border_color: str):
        """
        Sets the profile_sidebar_border_color of this Users.

        :param profile_sidebar_border_color: The profile_sidebar_border_color of this Users.
        :type profile_sidebar_border_color: str
        """

        self._profile_sidebar_border_color = profile_sidebar_border_color

    @property
    def profile_sidebar_fill_color(self) -> str:
        """
        Gets the profile_sidebar_fill_color of this Users.

        :return: The profile_sidebar_fill_color of this Users.
        :rtype: str
        """
        return self._profile_sidebar_fill_color

    @profile_sidebar_fill_color.setter
    def profile_sidebar_fill_color(self, profile_sidebar_fill_color: str):
        """
        Sets the profile_sidebar_fill_color of this Users.

        :param profile_sidebar_fill_color: The profile_sidebar_fill_color of this Users.
        :type profile_sidebar_fill_color: str
        """

        self._profile_sidebar_fill_color = profile_sidebar_fill_color

    @property
    def profile_text_color(self) -> str:
        """
        Gets the profile_text_color of this Users.

        :return: The profile_text_color of this Users.
        :rtype: str
        """
        return self._profile_text_color

    @profile_text_color.setter
    def profile_text_color(self, profile_text_color: str):
        """
        Sets the profile_text_color of this Users.

        :param profile_text_color: The profile_text_color of this Users.
        :type profile_text_color: str
        """

        self._profile_text_color = profile_text_color

    @property
    def profile_use_background_image(self) -> bool:
        """
        Gets the profile_use_background_image of this Users.

        :return: The profile_use_background_image of this Users.
        :rtype: bool
        """
        return self._profile_use_background_image

    @profile_use_background_image.setter
    def profile_use_background_image(self, profile_use_background_image: bool):
        """
        Sets the profile_use_background_image of this Users.

        :param profile_use_background_image: The profile_use_background_image of this Users.
        :type profile_use_background_image: bool
        """

        self._profile_use_background_image = profile_use_background_image

    @property
    def protected(self) -> bool:
        """
        Gets the protected of this Users.

        :return: The protected of this Users.
        :rtype: bool
        """
        return self._protected

    @protected.setter
    def protected(self, protected: bool):
        """
        Sets the protected of this Users.

        :param protected: The protected of this Users.
        :type protected: bool
        """

        self._protected = protected

    @property
    def screen_name(self) -> str:
        """
        Gets the screen_name of this Users.

        :return: The screen_name of this Users.
        :rtype: str
        """
        return self._screen_name

    @screen_name.setter
    def screen_name(self, screen_name: str):
        """
        Sets the screen_name of this Users.

        :param screen_name: The screen_name of this Users.
        :type screen_name: str
        """

        self._screen_name = screen_name

    @property
    def show_all_inline_media(self) -> bool:
        """
        Gets the show_all_inline_media of this Users.

        :return: The show_all_inline_media of this Users.
        :rtype: bool
        """
        return self._show_all_inline_media

    @show_all_inline_media.setter
    def show_all_inline_media(self, show_all_inline_media: bool):
        """
        Sets the show_all_inline_media of this Users.

        :param show_all_inline_media: The show_all_inline_media of this Users.
        :type show_all_inline_media: bool
        """

        self._show_all_inline_media = show_all_inline_media

    @property
    def statuses_count(self) -> int:
        """
        Gets the statuses_count of this Users.

        :return: The statuses_count of this Users.
        :rtype: int
        """
        return self._statuses_count

    @statuses_count.setter
    def statuses_count(self, statuses_count: int):
        """
        Sets the statuses_count of this Users.

        :param statuses_count: The statuses_count of this Users.
        :type statuses_count: int
        """

        self._statuses_count = statuses_count

    @property
    def time_zone(self) -> str:
        """
        Gets the time_zone of this Users.

        :return: The time_zone of this Users.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone: str):
        """
        Sets the time_zone of this Users.

        :param time_zone: The time_zone of this Users.
        :type time_zone: str
        """

        self._time_zone = time_zone

    @property
    def url(self) -> str:
        """
        Gets the url of this Users.

        :return: The url of this Users.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """
        Sets the url of this Users.

        :param url: The url of this Users.
        :type url: str
        """

        self._url = url

    @property
    def utc_offset(self) -> int:
        """
        Gets the utc_offset of this Users.

        :return: The utc_offset of this Users.
        :rtype: int
        """
        return self._utc_offset

    @utc_offset.setter
    def utc_offset(self, utc_offset: int):
        """
        Sets the utc_offset of this Users.

        :param utc_offset: The utc_offset of this Users.
        :type utc_offset: int
        """

        self._utc_offset = utc_offset

    @property
    def verified(self) -> bool:
        """
        Gets the verified of this Users.

        :return: The verified of this Users.
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified: bool):
        """
        Sets the verified of this Users.

        :param verified: The verified of this Users.
        :type verified: bool
        """

        self._verified = verified

    @property
    def withheld_in_countries(self) -> str:
        """
        Gets the withheld_in_countries of this Users.

        :return: The withheld_in_countries of this Users.
        :rtype: str
        """
        return self._withheld_in_countries

    @withheld_in_countries.setter
    def withheld_in_countries(self, withheld_in_countries: str):
        """
        Sets the withheld_in_countries of this Users.

        :param withheld_in_countries: The withheld_in_countries of this Users.
        :type withheld_in_countries: str
        """

        self._withheld_in_countries = withheld_in_countries

    @property
    def withheld_scope(self) -> str:
        """
        Gets the withheld_scope of this Users.

        :return: The withheld_scope of this Users.
        :rtype: str
        """
        return self._withheld_scope

    @withheld_scope.setter
    def withheld_scope(self, withheld_scope: str):
        """
        Sets the withheld_scope of this Users.

        :param withheld_scope: The withheld_scope of this Users.
        :type withheld_scope: str
        """

        self._withheld_scope = withheld_scope

